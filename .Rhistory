# progress bar
pb <- txtProgressBar(min = 0, max = nrow(county_data), style = 3)
# Geocode county level data
for (i in 1:nrow(county_data)) {
# Set postgresql query with address
#clean street name
street_address <- gsub('\'','', as.character(county_data[i,8]))
# Paste full address with street name, city, state, and zipcode, within query
address <- paste(street_address, as.character(county_data[i,10]), "FL", as.character(county_data[i, 12]))
query <- paste0("SELECT g.rating, ST_AsText(ST_SnapToGrid(g.geomout,0.00001))
As wktlonlat, (addy).address As stno, (addy).streetname As street,
(addy).streettypeabbrev As styp, (addy).location As city,
(addy).stateabbrev As st,(addy).zip FROM geocode('", address ,"',1) As g;")
# Get postgresql coordinates
df_postgres <- dbGetQuery(con, query)
# If result is empty, skip
if (nrow(df_postgres) == 0) {next}
# Extract coordinates
coord <- strsplit(df_postgres$wktlonlat, "\\s|\\(|\\)")
# Name columns
county_data[i,'lon'] <- coord[[1]][2]
county_data[i,'lat'] <- coord[[1]][3]
# Print linenumber every 10000 rows
if (i %% 10000 == 0) {print(paste("row", i))}
setTxtProgressBar(pb, i)
}
write.table(county_data, file=paste0(data_directory, "/geocoded/", data_files[j]))
cat(paste("Completed:", data_files[j]), "\n")
}
j
i
nrow(county_data)
address
gsub("\\", "", address, fixed=TRUE)
i
for (j in 832978:length(data_files)) {
if (data_files[j] == "geocoded") {
next
}
# Skip if already geocoded
if(data_files[j] %in% geocoded_files) {
cat(paste0("Skipping: ", data_files[j], ", already geocoded.\n"))
next
}
# Add a slash
test <- paste0(data_directory, "/", data_files[j])
cat(paste("Beginning:", data_files[j]), "\n")
# Read county data
county_data <- read.delim(test, header=FALSE)
county_data$lon <- NA
county_data$lat <- NA
# progress bar
pb <- txtProgressBar(min = 0, max = nrow(county_data), style = 3)
# Geocode county level data
for (i in 1:nrow(county_data)) {
# Set postgresql query with address
#clean street name
street_address <- gsub('\'','', as.character(county_data[i,8]))
# Paste full address with street name, city, state, and zipcode, within query
address <- paste(street_address, as.character(county_data[i,10]), "FL", as.character(county_data[i, 12]))
# Remove backslashes that appear in rare cases (once every 10million lines lol)
address <- gsub("\\", "", address, fixed=TRUE)
query <- paste0("SELECT g.rating, ST_AsText(ST_SnapToGrid(g.geomout,0.00001))
As wktlonlat, (addy).address As stno, (addy).streetname As street,
(addy).streettypeabbrev As styp, (addy).location As city,
(addy).stateabbrev As st,(addy).zip FROM geocode('", address ,"',1) As g;")
# Get postgresql coordinates
df_postgres <- dbGetQuery(con, query)
# If result is empty, skip
if (nrow(df_postgres) == 0) {next}
# Extract coordinates
coord <- strsplit(df_postgres$wktlonlat, "\\s|\\(|\\)")
# Name columns
county_data[i,'lon'] <- coord[[1]][2]
county_data[i,'lat'] <- coord[[1]][3]
# Print linenumber every 10000 rows
if (i %% 10000 == 0) {print(paste("row", i))}
setTxtProgressBar(pb, i)
}
for (i in 832978:nrow(county_data)) {
# Set postgresql query with address
#clean street name
street_address <- gsub('\'','', as.character(county_data[i,8]))
# Paste full address with street name, city, state, and zipcode, within query
address <- paste(street_address, as.character(county_data[i,10]), "FL", as.character(county_data[i, 12]))
# Remove backslashes that appear in rare cases (once every 10million lines lol)
address <- gsub("\\", "", address, fixed=TRUE)
query <- paste0("SELECT g.rating, ST_AsText(ST_SnapToGrid(g.geomout,0.00001))
As wktlonlat, (addy).address As stno, (addy).streetname As street,
(addy).streettypeabbrev As styp, (addy).location As city,
(addy).stateabbrev As st,(addy).zip FROM geocode('", address ,"',1) As g;")
# Get postgresql coordinates
df_postgres <- dbGetQuery(con, query)
# If result is empty, skip
if (nrow(df_postgres) == 0) {next}
# Extract coordinates
coord <- strsplit(df_postgres$wktlonlat, "\\s|\\(|\\)")
# Name columns
county_data[i,'lon'] <- coord[[1]][2]
county_data[i,'lat'] <- coord[[1]][3]
# Print linenumber every 10000 rows
if (i %% 10000 == 0) {print(paste("row", i))}
setTxtProgressBar(pb, i)
}
paste0(data_directory, "/geocoded/", data_files[j])
write.table(county_data, file=paste0(data_directory, "/geocoded/", data_files[j]))
cat(paste("Completed:", data_files[j]), "\n")
for (j in 52:53) {
if (data_files[j] == "geocoded") {
next
}
# Skip if already geocoded
if(data_files[j] %in% geocoded_files) {
cat(paste0("Skipping: ", data_files[j], ", already geocoded.\n"))
next
}
# Add a slash
test <- paste0(data_directory, "/", data_files[j])
cat(paste("Beginning:", data_files[j]), "\n")
# Read county data
county_data <- read.delim(test, header=FALSE)
county_data$lon <- NA
county_data$lat <- NA
# progress bar
pb <- txtProgressBar(min = 0, max = nrow(county_data), style = 3)
# Geocode county level data
for (i in 1:nrow(county_data)) {
# Set postgresql query with address
#clean street name
street_address <- gsub('\'','', as.character(county_data[i,8]))
# Paste full address with street name, city, state, and zipcode, within query
address <- paste(street_address, as.character(county_data[i,10]), "FL", as.character(county_data[i, 12]))
# Remove backslashes that appear in rare cases (once every 10million lines lol)
address <- gsub("\\", "", address, fixed=TRUE)
query <- paste0("SELECT g.rating, ST_AsText(ST_SnapToGrid(g.geomout,0.00001))
As wktlonlat, (addy).address As stno, (addy).streetname As street,
(addy).streettypeabbrev As styp, (addy).location As city,
(addy).stateabbrev As st,(addy).zip FROM geocode('", address ,"',1) As g;")
# Get postgresql coordinates
df_postgres <- dbGetQuery(con, query)
# If result is empty, skip
if (nrow(df_postgres) == 0) {next}
# Extract coordinates
coord <- strsplit(df_postgres$wktlonlat, "\\s|\\(|\\)")
# Name columns
county_data[i,'lon'] <- coord[[1]][2]
county_data[i,'lat'] <- coord[[1]][3]
# Print linenumber every 10000 rows
if (i %% 10000 == 0) {print(paste("row", i))}
setTxtProgressBar(pb, i)
}
write.table(county_data, file=paste0(data_directory, "/geocoded/", data_files[j]))
cat(paste("Completed:", data_files[j]), "\n")
}
names(data_files)
data_files
# Read County level data
for (j in 63:68) {
if (data_files[j] == "geocoded") {
next
}
# Skip if already geocoded
if(data_files[j] %in% geocoded_files) {
cat(paste0("Skipping: ", data_files[j], ", already geocoded.\n"))
next
}
# Add a slash
test <- paste0(data_directory, "/", data_files[j])
cat(paste("Beginning:", data_files[j]), "\n")
# Read county data
county_data <- read.delim(test, header=FALSE)
county_data$lon <- NA
county_data$lat <- NA
# progress bar
pb <- txtProgressBar(min = 0, max = nrow(county_data), style = 3)
# Geocode county level data
for (i in 1:nrow(county_data)) {
# Set postgresql query with address
#clean street name
street_address <- gsub('\'','', as.character(county_data[i,8]))
# Paste full address with street name, city, state, and zipcode, within query
address <- paste(street_address, as.character(county_data[i,10]), "FL", as.character(county_data[i, 12]))
# Remove backslashes that appear in rare cases (once every 10million lines lol)
address <- gsub("\\", "", address, fixed=TRUE)
query <- paste0("SELECT g.rating, ST_AsText(ST_SnapToGrid(g.geomout,0.00001))
As wktlonlat, (addy).address As stno, (addy).streetname As street,
(addy).streettypeabbrev As styp, (addy).location As city,
(addy).stateabbrev As st,(addy).zip FROM geocode('", address ,"',1) As g;")
# Get postgresql coordinates
df_postgres <- dbGetQuery(con, query)
# If result is empty, skip
if (nrow(df_postgres) == 0) {next}
# Extract coordinates
coord <- strsplit(df_postgres$wktlonlat, "\\s|\\(|\\)")
# Name columns
county_data[i,'lon'] <- coord[[1]][2]
county_data[i,'lat'] <- coord[[1]][3]
# Print linenumber every 100000 rows
if (i %% 100000 == 0) {print(paste("row", i))}
setTxtProgressBar(pb, i)
}
write.table(county_data, file=paste0(data_directory, "/geocoded/", data_files[j]))
cat(paste("Completed:", data_files[j]), "\n")
}
# already coded files
geocoded_files <- list.files(geocode_dir)
# Read County level data
for (j in 1:length(data_files)) {
if (data_files[j] == "geocoded") {
next
}
# Skip if already geocoded
if(data_files[j] %in% geocoded_files) {
cat(paste0("Skipping: ", data_files[j], ", already geocoded.\n"))
next
}
# Add a slash
test <- paste0(data_directory, "/", data_files[j])
cat(paste("Beginning:", data_files[j]), "\n")
# Read county data
county_data <- read.delim(test, header=FALSE)
county_data$lon <- NA
county_data$lat <- NA
# progress bar
pb <- txtProgressBar(min = 0, max = nrow(county_data), style = 3)
# Geocode county level data
for (i in 1:nrow(county_data)) {
# Set postgresql query with address
#clean street name
street_address <- gsub('\'','', as.character(county_data[i,8]))
# Paste full address with street name, city, state, and zipcode, within query
address <- paste(street_address, as.character(county_data[i,10]), "FL", as.character(county_data[i, 12]))
# Remove backslashes that appear in rare cases (once every 10million lines lol)
address <- gsub("\\", "", address, fixed=TRUE)
address <- gsub("'", "", address, fixed=TRUE)
query <- paste0("SELECT g.rating, ST_AsText(ST_SnapToGrid(g.geomout,0.00001))
As wktlonlat, (addy).address As stno, (addy).streetname As street,
(addy).streettypeabbrev As styp, (addy).location As city,
(addy).stateabbrev As st,(addy).zip FROM geocode('", address ,"',1) As g;")
# Get postgresql coordinates
df_postgres <- dbGetQuery(con, query)
# If result is empty, skip
if (nrow(df_postgres) == 0) {next}
# Extract coordinates
coord <- strsplit(df_postgres$wktlonlat, "\\s|\\(|\\)")
# Name columns
county_data[i,'lon'] <- coord[[1]][2]
county_data[i,'lat'] <- coord[[1]][3]
# Print linenumber every 100000 rows
if (i %% 100000 == 0) {print(paste("row", i))}
setTxtProgressBar(pb, i)
}
write.table(county_data, file=paste0(data_directory, "/geocoded/", data_files[j]))
cat(paste("Completed:", data_files[j]), "\n")
}
# Read County level data
for (j in 1:length(data_files)) {
if (data_files[j] == "geocoded") {
next
}
# Skip if already geocoded
if(data_files[j] %in% geocoded_files) {
cat(paste0("Skipping: ", data_files[j], ", already geocoded.\n"))
next
}
# Add a slash
test <- paste0(data_directory, "/", data_files[j])
cat(paste("Beginning:", data_files[j]), "\n")
# Read county data
county_data <- read.delim(test, header=FALSE)
county_data$lon <- NA
county_data$lat <- NA
# progress bar
pb <- txtProgressBar(min = 0, max = nrow(county_data), style = 3)
# Geocode county level data
for (i in 1:nrow(county_data)) {
# Set postgresql query with address
#clean street name
street_address <- gsub('\'','', as.character(county_data[i,8]))
# Paste full address with street name, city, state, and zipcode, within query
address <- paste(street_address, as.character(county_data[i,10]), "FL", as.character(county_data[i, 12]))
# Remove backslashes that appear in rare cases (once every 10million lines lol)
address <- gsub("\\", "", address, fixed=TRUE)
address <- gsub("'", "", address, fixed=TRUE)
query <- paste0("SELECT g.rating, ST_AsText(ST_SnapToGrid(g.geomout,0.00001))
As wktlonlat, (addy).address As stno, (addy).streetname As street,
(addy).streettypeabbrev As styp, (addy).location As city,
(addy).stateabbrev As st,(addy).zip FROM geocode('", address ,"',1) As g;")
# Get postgresql coordinates
df_postgres <- dbGetQuery(con, query)
# If result is empty, skip
if (nrow(df_postgres) == 0) {next}
# Extract coordinates
coord <- strsplit(df_postgres$wktlonlat, "\\s|\\(|\\)")
# Name columns
county_data[i,'lon'] <- coord[[1]][2]
county_data[i,'lat'] <- coord[[1]][3]
# Print linenumber every 100000 rows
#if (i %% 100000 == 0) {print(paste("row", i))}
setTxtProgressBar(pb, i)
}
write.table(county_data, file=paste0(data_directory, "/geocoded/", data_files[j]))
cat(paste("Completed:", data_files[j]), "\n")
}
address
address <- gsub("(", "", address, fixed=TRUE)
address
i
for (i in 1:nrow(county_data)) {
# Set postgresql query with address
#clean street name
street_address <- gsub('\'','', as.character(county_data[i,8]))
# Paste full address with street name, city, state, and zipcode, within query
address <- paste(street_address, as.character(county_data[i,10]), "FL", as.character(county_data[i, 12]))
# Remove backslashes that appear in rare cases (once every 10million lines lol)
address <- gsub("\\", "", address, fixed=TRUE)
address <- gsub("'", "", address, fixed=TRUE)
address <- gsub("(", "", address, fixed=TRUE)
query <- paste0("SELECT g.rating, ST_AsText(ST_SnapToGrid(g.geomout,0.00001))
As wktlonlat, (addy).address As stno, (addy).streetname As street,
(addy).streettypeabbrev As styp, (addy).location As city,
(addy).stateabbrev As st,(addy).zip FROM geocode('", address ,"',1) As g;")
# Get postgresql coordinates
df_postgres <- dbGetQuery(con, query)
# If result is empty, skip
if (nrow(df_postgres) == 0) {next}
# Extract coordinates
coord <- strsplit(df_postgres$wktlonlat, "\\s|\\(|\\)")
# Name columns
county_data[i,'lon'] <- coord[[1]][2]
county_data[i,'lat'] <- coord[[1]][3]
# Print linenumber every 100000 rows
#if (i %% 100000 == 0) {print(paste("row", i))}
setTxtProgressBar(pb, i)
}
write.table(county_data, file=paste0(data_directory, "/geocoded/", data_files[j]))
cat(paste("Completed:", data_files[j]), "\n")
install.packages("rgdal")
require("rgdal")
map_dir <- "/Users/pbl/Downloads/election-geodata-master/data/12-florida/county/2016/SAR"
setwd(map_dir)
list.files()
ogrListLayers("Sarasota_Pcts_2016.MAP")
readOGR("Sarasota_Pcts_2016.MAP")
ogrListLayers("Sarasota_Pcts_2016.TAB")
readOGR("Sarasota_Pcts_2016.TAB")
test_map <- readOGR("Sarasota_Pcts_2016.TAB")
spTransform(test_map)
plot(test_map)
str(test_map)
head(test_map)
head(test_map, 1)
test_map$PRECINCT[1]
test_map$PRECINCT[2]
test_map$PRECINCT
plot(test_map$PRECINCT[1])
plot(test_map)
test_map[1]
test_map[1][[1]]
test_map[1][[2]]
getSlots(test_map[1])
slotNames(test_map[1])
slot(test_map, "data")
slotNames(test_map[1])
slot(test_map, "polygons")
slotNames(test_map[1])
slot(test_map, "bbox")
slot(test_map, "proj4string")
vote_data <- "/Users/pbl/Documents/20171010_VoterDetail/geocoded"
read.csv("SAR_20171010.txt")
read.csv(paste0(vote_data, "/SAR_20171010.txt"))
test_vote_data <- read.csv(paste0(vote_data, "/SAR_20171010.txt"))
test_vote_data <- read.csv(paste0(vote_data, "/SAR_20171010.txt"))
install.packages("readxlsx")
install.packages("xlsx")
require("xlsx")
install.packages("rJava")
require(rJava)
require(rJava)
require(rJava)
require(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("openxlsx")
library(openxlsx)
require("openxlsx")
test_precinct_data <- read.xlsx(paste0(precinct_data, "/SAR20120621PctBlock8f799240-19ca-4402-82c2-47e8a7972126.xlsx"))
precinct_data <- "/Users/pbl/Downloads/election-geodata-master/data/12-florida/county/2016/src/SAN-WAS/SAR"
test_precinct_data <- read.xlsx(paste0(precinct_data, "/SAR20120621PctBlock8f799240-19ca-4402-82c2-47e8a7972126.xlsx"))
head(test_precinct_data)
tail(test_precinct_data)
test_poll_data <- read.xlsx(paste0(precinct_data, "SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"))
test_poll_data <- read.xlsx(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"))
head(test_poll_data)
test_poll_data
test_poll_data
head(test_precinct_data)
head(test_poll_data)
test_poll_data <- read.xlsx(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"))
read.xlsx(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"))
test_poll_data <- read.xlsx(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"))
test_poll_data
test_poll_data <- read.xlsx(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"))
head(test_poll_data)
test_poll_data <- read.xlsx(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"), startRow = 2)
head(test_poll_data)
install.packages("readxl")
library(readxl)
test_poll_data <- readxl(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"), startRow = 2)
test_poll_data <- read_excel(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"), startRow = 2)
test_poll_data <- read_excel(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"))
test_poll_data
source("https://gist.github.com/schaunwheeler/5825002/raw/3526a15b032c06392740e20b6c9a179add2cee49/xlsxToR.r")
xlsxToR = function("myfile.xlsx", header = TRUE)
xlsxToR = function(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"), header = TRUE)
xlsxToR = function(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"), header = TRUE)
test_name <- paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx")
xlsxToR = function(test_name, header = TRUE)
xlsxToR(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"), header = TRUE)
ye <- xlsxToR(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.xlsx"), header = TRUE)
test_poll_data <- read.csv(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.csv"), startRow = 2)
test_poll_data <- read.csv(paste0(precinct_data, "/SAR20120621_PctPollb9db6924-8eca-472a-ba26-89293b4bd3bb.csv"))
head(test_poll_data)
test_precinct_data <- read.csv(paste0(precinct_data, "/SAR20120621PctBlock8f799240-19ca-4402-82c2-47e8a7972126.csv"))
test_precinct_data
slotNames(test_map[1])
slot(test_map[1], "data")
plot(test_map[1])
plot(test_map)
plot(test_map[4])
length(test_map)
plot(test_map[[1]])
plot(test_map[1,])
plot(test_map[2,])
plot(test_map[3,])
plot(test_map[4,])
ggplot(test_map[4,])
require("ggplot2")
install.packages("ggplot2")
require("ggplot2")
ggplot(test_map[4,])
ggplot(test_map)
ggplot(data=test_map)
ggmap_data <- prepShp4plot(test_map)
install.packages("plyr")
install.packages("plyr")
install.packages("rworldmap")
library(rworldmap)
ggmap_data <- prepShp4plot(test_map)
library(plyr)
ggmap_data <- prepShp4plot(test_map)
prepShp4plot <- function(inShp){
inShp$id <- as.numeric(1:NROW(inShp))
inShp.fort <- fortify(inShp, region = "id")
countryDf <- join(inShp.fort,inShp@data)
}
ggmap_data <- prepShp4plot(test_map)
gpclibPermit()
install.packages(maptools)
install.packages("maptools")
install.packages("maptools")
library(maptools)
gpclibPermit()
gpclibPermit()
install.packages("gpclib")
library(gpclib)
gpclibPermit()
install.packages("rgeos")
library(rgeos)
prepShp4plot <- function(inShp){
inShp$id <- as.numeric(1:NROW(inShp))
inShp.fort <- fortify(inShp, region = "id")
countryDf <- join(inShp.fort,inShp@data)
}
ggmap_data <- prepShp4plot(test_map)
ggplot(test_map[4,])
ggplot(ggmap_data[4,])
ggplot(ggmap_data)
plot(ggmap_data)
plot(test_map)
ggmap_data <- test_map
ggmap_data@data$id <- rownames(ggmap_data)
rownames(ggmap_data)
ggmap_data@data$id <- rownames(ggmap_data$PRECINCT)
ggmap_data.points <- fortify(ggmap_data, region="id")
ggmap_data@data$id <- rownames(ggmap_data@data)
rownames(ggmap_data@data)
ggmap_data.points <- fortify(ggmap_data, region="id")
ggmap_data.df <- join(ggmap_data.points, ggmap_data@data, by="id")
ggplot(ggmap_data.df)
ggplot(ggmap_data.df) +
aes(long,lat,group=group,fill="black" +
geom_polygon() +
geom_path(color="white") +
coord_equal()
ggplot(ggmap_data.df) +
aes(long,lat,group=group,fill="black" +
geom_polygon() +
geom_path(color="white") +
coord_equal()
ggplot(ggmap_data.df) +
aes(long,lat,group=group,fill="black") +
geom_polygon() +
geom_path(color="white") +
coord_equal()
ggplot(ggmap_data.df) +
aes(long,lat,group=group,color="black") +
geom_polygon() +
geom_path(color="white") +
coord_equal()
